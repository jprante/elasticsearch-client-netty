
plugins {
    id "org.sonarqube" version "2.8"
    id "io.codearte.nexus-staging" version "0.21.0"
    id "com.github.spotbugs" version "2.0.1"
    id "org.xbib.gradle.plugin.asciidoctor" version "1.6.0.1"
}

if (JavaVersion.current() < JavaVersion.VERSION_11) {
    throw new GradleException("This build must be run with java 11")
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'maven'
    apply plugin: 'com.github.spotbugs'
    apply plugin: 'pmd'
    apply plugin: 'checkstyle'
    apply plugin: 'org.xbib.gradle.plugin.asciidoctor'

    configurations {
        asciidoclet
    }

    dependencies {
        testImplementation "org.junit.jupiter:junit-jupiter-api:${project.property('junit.version')}"
        testImplementation "org.apache.logging.log4j:log4j-core:${project.property('log4j.version')}"
        testImplementation "org.apache.logging.log4j:log4j-jul:${project.property('log4j.version')}"
        testImplementation "org.apache.logging.log4j:log4j-slf4j-impl:${project.property('log4j.version')}"
        testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:${project.property('junit.version')}"
        asciidoclet "org.xbib:asciidoclet:${project.property('asciidoclet.version')}"
    }

    compileJava {
        sourceCompatibility = JavaVersion.VERSION_11
        targetCompatibility = JavaVersion.VERSION_11
    }
    compileTestJava {
        sourceCompatibility = JavaVersion.VERSION_11
        targetCompatibility = JavaVersion.VERSION_11
    }

    tasks.withType(JavaCompile) {
        options.compilerArgs << "-Xlint:all"
        if (!options.compilerArgs.contains("-processor")) {
            options.compilerArgs << '-proc:none'
        }
    }

    test {
        enabled = true
        useJUnitPlatform()
        doFirst {
            jvmArgs = [
                    '--add-exports=java.base/jdk.internal.ref=ALL-UNNAMED',
                    '--add-exports=java.base/jdk.internal.misc=ALL-UNNAMED',
                    '--add-opens=java.base/java.nio=ALL-UNNAMED'
            ]
        }
        systemProperty 'java.util.logging.manager', 'org.apache.logging.log4j.jul.LogManager'
        systemProperty 'path.home', "${project.buildDir}"
        systemProperty 'jna.debug_load', 'true'
        failFast = true
        testLogging {
            events 'PASSED', 'FAILED', 'SKIPPED'
        }
        afterSuite { desc, result ->
            if (!desc.parent) {
                println "\nTest result: ${result.resultType}"
                println "Test summary: ${result.testCount} tests, " +
                        "${result.successfulTestCount} succeeded, " +
                        "${result.failedTestCount} failed, " +
                        "${result.skippedTestCount} skipped"
            }
        }
    }
    
    clean {
        delete "out"
        delete "null"
    }
    
    /*javadoc {
        options.docletpath = configurations.asciidoclet.files.asType(List)
        options.doclet = 'org.xbib.asciidoclet.Asciidoclet'
        options.overview = "src/docs/asciidoclet/overview.adoc"
        options.addStringOption "-base-dir", "${projectDir}"
        options.addStringOption "-attribute",
                "name=${project.name},version=${project.version},title-link=https://github.com/jprante/${project.name}"
        configure(options) {
            noTimestamp = true
        }
    }*/

    task javadocJar(type: Jar, dependsOn: javadoc) {
        archiveClassifier.set('javadoc')
    }

    task sourcesJar(type: Jar, dependsOn: classes) {
        from sourceSets.main.allSource
        archiveClassifier.set('sources')
    }

    artifacts {
        archives javadocJar, sourcesJar
    }

    spotbugs {
        effort = "max"
        reportLevel = "low"
        //includeFilter = file("findbugs-exclude.xml")
    }

    tasks.withType(com.github.spotbugs.SpotBugsTask) {
        ignoreFailures = true
        reports {
            xml.enabled = false
            html.enabled = true
        }
    }

    tasks.withType(Pmd) {
        ignoreFailures = true
        reports {
            xml.enabled = true
            html.enabled = true
        }
    }
    tasks.withType(Checkstyle) {
        ignoreFailures = true
        reports {
            xml.enabled = true
            html.enabled = true
        }
    }

    pmd {
        toolVersion = '6.11.0'
        ruleSets = ['category/java/bestpractices.xml']
    }

    checkstyle {
        configFile = rootProject.file('config/checkstyle/checkstyle.xml')
        ignoreFailures = true
        showViolations = true
    }

    sonarqube {
        properties {
            property "sonar.projectName", "${project.group} ${project.name}"
            property "sonar.sourceEncoding", "UTF-8"
            property "sonar.tests", "src/test/java"
            property "sonar.scm.provider", "git"
            property "sonar.junit.reportsPath", "build/test-results/test/"
        }
    }
    ext {
        description = 'Extensions for Elasticsearch clients (node and transport)'
        scmUrl = 'https://github.com/jprante/elx'
        scmConnection = 'scm:git:git://github.com/jprante/elx.git'
        scmDeveloperConnection = 'scm:git:git://github.com/jprante/elx.git'
    }

    task sonaTypeUpload(type: Upload, dependsOn: build) {
        group = 'publish'
        configuration = configurations.archives
        uploadDescriptor = true
        repositories {
            if (project.hasProperty('ossrhUsername')) {
                mavenDeployer {
                    beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }
                    repository(url: 'https://oss.sonatype.org/service/local/staging/deploy/maven2') {
                        authentication(userName: ossrhUsername, password: ossrhPassword)
                    }
                    snapshotRepository(url: 'https://oss.sonatype.org/content/repositories/snapshots') {
                        authentication(userName: ossrhUsername, password: ossrhPassword)
                    }
                    pom.project {
                        groupId project.group
                        artifactId project.name
                        version project.version
                        name project.name
                        description description
                        packaging 'jar'
                        inceptionYear '2019'
                        url scmUrl
                        organization {
                            name 'xbib'
                            url 'http://xbib.org'
                        }
                        developers {
                            developer {
                                id 'xbib'
                                name 'JÃ¶rg Prante'
                                email 'joergprante@gmail.com'
                                url 'https://github.com/jprante'
                            }
                        }
                        scm {
                            url scmUrl
                            connection scmConnection
                            developerConnection scmDeveloperConnection
                        }
                        licenses {
                            license {
                                name 'The Apache License, Version 2.0'
                                url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                            }
                        }
                    }
                }
            }
        }
    }

    nexusStaging {
        packageGroup = "org.xbib"
    }
}
